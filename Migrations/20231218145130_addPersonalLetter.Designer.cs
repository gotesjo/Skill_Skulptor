// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SkillSkulptor.Models;

#nullable disable

namespace SkillSkulptor.Migrations
{
    [DbContext(typeof(SsDbContext))]
    [Migration("20231218145130_addPersonalLetter")]
    partial class addPersonalLetter
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SkillSkulptor.Models.Adress", b =>
                {
                    b.Property<int>("AdressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdressID"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdressID");

                    b.ToTable("Adresses");

                    b.HasData(
                        new
                        {
                            AdressID = 1,
                            City = "City1",
                            Country = "Country1",
                            Street = "123 Main St",
                            ZipCode = "12345"
                        },
                        new
                        {
                            AdressID = 2,
                            City = "City2",
                            Country = "Country2",
                            Street = "456 Oak St",
                            ZipCode = "67890"
                        });
                });

            modelBuilder.Entity("SkillSkulptor.Models.AppUser", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("Address")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phonenr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Picture")
                        .HasColumnType("int");

                    b.Property<bool>("ProfileAccess")
                        .HasColumnType("bit");

                    b.HasKey("UserId");

                    b.HasIndex("Address")
                        .IsUnique()
                        .HasFilter("[Address] IS NOT NULL");

                    b.HasIndex("Picture")
                        .IsUnique()
                        .HasFilter("[Picture] IS NOT NULL");

                    b.ToTable("AppUsers");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Active = true,
                            Address = 1,
                            Email = "john.doe@example.com",
                            Firstname = "John",
                            Lastname = "Doe",
                            Password = "password1",
                            Phonenr = "123456789",
                            Picture = 1,
                            ProfileAccess = true
                        },
                        new
                        {
                            UserId = 2,
                            Active = true,
                            Address = 2,
                            Email = "jane.smith@example.com",
                            Firstname = "Jane",
                            Lastname = "Smith",
                            Password = "password2",
                            Phonenr = "987654321",
                            Picture = 2,
                            ProfileAccess = true
                        });
                });

            modelBuilder.Entity("SkillSkulptor.Models.CV", b =>
                {
                    b.Property<int>("CVID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CVID"));

                    b.Property<int>("BelongsTo")
                        .HasColumnType("int");

                    b.Property<int>("Clicks")
                        .HasColumnType("int");

                    b.Property<string>("PersonalLetter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CVID");

                    b.HasIndex("BelongsTo")
                        .IsUnique();

                    b.ToTable("CVs");

                    b.HasData(
                        new
                        {
                            CVID = 1,
                            BelongsTo = 1,
                            Clicks = 10,
                            PersonalLetter = "Förutom att vara webbutvecklare tycker jag mest om att vara utomhus. På vintern är jag en ivrig skidåkare och nybörjare. På sommaren tycker jag om att cykla mountainbike, friklättra och paddla kajak.\r\nNär jag tvingas inomhus följer jag ett antal sci-fi- och fantasy-genrefilmer och tv-program, jag är en blivande kock, och jag spenderar en stor del av min fritid på att utforska de senaste tekniska framstegen i front-end webbutvecklingsvärlden.",
                            Summary = "Experienced professional"
                        },
                        new
                        {
                            CVID = 2,
                            BelongsTo = 2,
                            Clicks = 5,
                            PersonalLetter = "Utöver min akademiska bakgrund och yrkeserfarenhet omfattar mitt liv en varierad mix av intressen och passioner. Jag har en grundutbildning inom psykologi, där jag har fördjupat mig i att förstå människors tankar och beteenden. Min tid på universitetet har gett mig insikter som jag använder för att skapa meningsfulla och användarcentrerade digitala lösningar.\r\nNär jag inte dyker in i världen av psykologi och användbarhet, finner jag glädje i att utforska konst och kreativitet. Jag har en konstnärlig sida som jag utvecklar genom att måla och delta i konstutställningar. Att skapa och uppleva konst ger mig en nödvändig kontrast till den tekniska världen.\r\nUtöver detta är jag en hängiven friluftsentusiast. Jag njuter av vandring i naturen, camping och fotografering av landskap.\r\nMin utbildning och intressen kompletterar varandra på ett sätt som berikar mitt perspektiv, vilket i sin tur påverkar hur jag närmar mig utmaningar och kreativa projekt.",
                            Summary = "Entry-level candidate"
                        });
                });

            modelBuilder.Entity("SkillSkulptor.Models.Education", b =>
                {
                    b.Property<int>("EdID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EdID"));

                    b.Property<string>("Course")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CvId")
                        .HasColumnType("int");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EdID");

                    b.HasIndex("CvId");

                    b.ToTable("Educations");

                    b.HasData(
                        new
                        {
                            EdID = 1,
                            Course = "Systemutveckling",
                            CvId = 1,
                            Degree = "Bachelor's",
                            EndDate = new DateTime(2022, 12, 18, 15, 51, 29, 208, DateTimeKind.Local).AddTicks(5561),
                            Institution = "University1",
                            StartDate = new DateTime(2019, 12, 18, 15, 51, 29, 208, DateTimeKind.Local).AddTicks(5306)
                        },
                        new
                        {
                            EdID = 2,
                            Course = "Systemutveckling",
                            CvId = 1,
                            Degree = "Master's",
                            EndDate = new DateTime(2021, 12, 18, 15, 51, 29, 208, DateTimeKind.Local).AddTicks(5579),
                            Institution = "University2",
                            StartDate = new DateTime(2020, 12, 18, 15, 51, 29, 208, DateTimeKind.Local).AddTicks(5572)
                        },
                        new
                        {
                            EdID = 3,
                            Course = "Systemutveckling",
                            CvId = 2,
                            Degree = "Associate",
                            EndDate = new DateTime(2022, 12, 18, 15, 51, 29, 208, DateTimeKind.Local).AddTicks(5593),
                            Institution = "College1",
                            StartDate = new DateTime(2021, 12, 18, 15, 51, 29, 208, DateTimeKind.Local).AddTicks(5587)
                        });
                });

            modelBuilder.Entity("SkillSkulptor.Models.Experience", b =>
                {
                    b.Property<int>("ExId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExId"));

                    b.Property<int>("Cv")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Employer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ExId");

                    b.HasIndex("Cv");

                    b.ToTable("Experiences");

                    b.HasData(
                        new
                        {
                            ExId = 1,
                            Cv = 1,
                            Description = "Worked on various projects",
                            Employer = "Company1",
                            EndDate = new DateTime(2022, 12, 18, 15, 51, 29, 208, DateTimeKind.Local).AddTicks(5685),
                            Position = "Developer",
                            StartDate = new DateTime(2020, 12, 18, 15, 51, 29, 208, DateTimeKind.Local).AddTicks(5679)
                        },
                        new
                        {
                            ExId = 2,
                            Cv = 2,
                            Description = "Assisted with tasks",
                            Employer = "Company2",
                            EndDate = new DateTime(2022, 12, 18, 15, 51, 29, 208, DateTimeKind.Local).AddTicks(5699),
                            Position = "Intern",
                            StartDate = new DateTime(2021, 12, 18, 15, 51, 29, 208, DateTimeKind.Local).AddTicks(5693)
                        });
                });

            modelBuilder.Entity("SkillSkulptor.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<int>("FromUserID")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ToUserID")
                        .HasColumnType("int");

                    b.Property<bool>("ViewStatus")
                        .HasColumnType("bit");

                    b.HasKey("MessageId");

                    b.HasIndex("FromUserID");

                    b.HasIndex("ToUserID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("SkillSkulptor.Models.Profilepicture", b =>
                {
                    b.Property<int>("PicrtureID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PicrtureID"));

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PicrtureID");

                    b.ToTable("ProfilePictures");

                    b.HasData(
                        new
                        {
                            PicrtureID = 1,
                            Filename = "profile1.jpg"
                        },
                        new
                        {
                            PicrtureID = 2,
                            Filename = "profile2.jpg"
                        });
                });

            modelBuilder.Entity("SkillSkulptor.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Enddate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Startdate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProjectId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("SkillSkulptor.Models.ProjectMembers", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectMembers");
                });

            modelBuilder.Entity("SkillSkulptor.Models.Qualification", b =>
                {
                    b.Property<int>("QID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QID"));

                    b.Property<int>("CvId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QID");

                    b.HasIndex("CvId");

                    b.ToTable("Qualifications");

                    b.HasData(
                        new
                        {
                            QID = 1,
                            CvId = 1,
                            Description = "Certification description 1",
                            QName = "Certification1"
                        },
                        new
                        {
                            QID = 2,
                            CvId = 2,
                            Description = "Certification description 2",
                            QName = "Certification2"
                        });
                });

            modelBuilder.Entity("SkillSkulptor.Models.AppUser", b =>
                {
                    b.HasOne("SkillSkulptor.Models.Adress", "fkAddress")
                        .WithOne("resident")
                        .HasForeignKey("SkillSkulptor.Models.AppUser", "Address");

                    b.HasOne("SkillSkulptor.Models.Profilepicture", "fkPicture")
                        .WithOne("pictureUser")
                        .HasForeignKey("SkillSkulptor.Models.AppUser", "Picture");

                    b.Navigation("fkAddress");

                    b.Navigation("fkPicture");
                });

            modelBuilder.Entity("SkillSkulptor.Models.CV", b =>
                {
                    b.HasOne("SkillSkulptor.Models.AppUser", "fkUser")
                        .WithOne("userCV")
                        .HasForeignKey("SkillSkulptor.Models.CV", "BelongsTo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("fkUser");
                });

            modelBuilder.Entity("SkillSkulptor.Models.Education", b =>
                {
                    b.HasOne("SkillSkulptor.Models.CV", "cv")
                        .WithMany("Educations")
                        .HasForeignKey("CvId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cv");
                });

            modelBuilder.Entity("SkillSkulptor.Models.Experience", b =>
                {
                    b.HasOne("SkillSkulptor.Models.CV", "fkCv")
                        .WithMany("Experiences")
                        .HasForeignKey("Cv")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("fkCv");
                });

            modelBuilder.Entity("SkillSkulptor.Models.Message", b =>
                {
                    b.HasOne("SkillSkulptor.Models.AppUser", "fkFromUser")
                        .WithMany("SentMessages")
                        .HasForeignKey("FromUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SkillSkulptor.Models.AppUser", "fkToUser")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ToUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("fkFromUser");

                    b.Navigation("fkToUser");
                });

            modelBuilder.Entity("SkillSkulptor.Models.Project", b =>
                {
                    b.HasOne("SkillSkulptor.Models.AppUser", "CreatedByUser")
                        .WithMany("OwnProjects")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("SkillSkulptor.Models.ProjectMembers", b =>
                {
                    b.HasOne("SkillSkulptor.Models.Project", "Project")
                        .WithMany("listProjectmembers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SkillSkulptor.Models.AppUser", "User")
                        .WithMany("listProjectmembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SkillSkulptor.Models.Qualification", b =>
                {
                    b.HasOne("SkillSkulptor.Models.CV", "fkCv")
                        .WithMany("Qualifications")
                        .HasForeignKey("CvId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("fkCv");
                });

            modelBuilder.Entity("SkillSkulptor.Models.Adress", b =>
                {
                    b.Navigation("resident")
                        .IsRequired();
                });

            modelBuilder.Entity("SkillSkulptor.Models.AppUser", b =>
                {
                    b.Navigation("OwnProjects");

                    b.Navigation("ReceivedMessages");

                    b.Navigation("SentMessages");

                    b.Navigation("listProjectmembers");

                    b.Navigation("userCV");
                });

            modelBuilder.Entity("SkillSkulptor.Models.CV", b =>
                {
                    b.Navigation("Educations");

                    b.Navigation("Experiences");

                    b.Navigation("Qualifications");
                });

            modelBuilder.Entity("SkillSkulptor.Models.Profilepicture", b =>
                {
                    b.Navigation("pictureUser")
                        .IsRequired();
                });

            modelBuilder.Entity("SkillSkulptor.Models.Project", b =>
                {
                    b.Navigation("listProjectmembers");
                });
#pragma warning restore 612, 618
        }
    }
}
